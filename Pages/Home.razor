@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IJSRuntime js

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <button @onclick="ShowDialog" class="btn btn-primary float-end">Add Product</button>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>NAME</th>
                                <th>AMOUNT</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Products.Any())
                            {
                                foreach (var product in Products)
                                {
                                    <tr>
                                        <td>@product.Id</td>
                                        <td>@product.Name</td>
                                        <td>@product.Amount</td>
                                        <td>
                                            <div class="hstack gap-2">
                                                <a class="btn btn-none btn-sm fw-bold text-info" @onclick="()=>EditProductClicked(product)">Edit</a>
                                                <a class="btn btn-none btn-sm fw-bold text-danger" @onclick="()=>DeleteProductClicked(product)">Delete</a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<DialogComponent HandleAddProductEvent="HandleAddProductEvent"
                 Product="Product"
                 @ref="dialogComponent"
                 HandleConfirmDeleteEvent="HandleConfirmDeleteEvent">

</DialogComponent>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <EditForm Model="person" OnSubmit="AddPerson" Enhance>
                        <div class="hstack gap-2">
                            <label class="label-control">Fullname</label>
                            <InputText @bind-Value="person.Name" class="form-control"></InputText>
                            <label class="label-control">Birth Date</label>
                            <InputDate @bind-Value="SelectedDate" class="form-control "></InputDate>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-body">
                    <QuickGrid Items="@PersonsQueryable" Pagination="pagination">
                        <PropertyColumn Property="@(p => p.PersonId)" Sortable="true" Align="Align.Center" />
                        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPerson" placeholder="Person name..." />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Property="@(p => p.BirthDate)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Age in years" Property="@(c => ComputeAge(c.BirthDate))" Sortable="true" Align="Align.Right" />
                        <TemplateColumn Title="Action">
                            <button @onclick="@(() => Edit(context))" class="btn btn-info">Edit</button>
                            <button @onclick="@(() => Delete(context))" class="btn btn-danger">Delete</button>
                        </TemplateColumn>
                    </QuickGrid>
                </div>
                <div class="card-footer"><Paginator State="@pagination" /></div>
            </div>
        </div>
    </div>
</div>




@code{
    DialogComponent? dialogComponent;
    string Message;
    Product Product = new();
    private async Task ShowDialog()
    {
        await js.InvokeVoidAsync("myDialogFunction");
        dialogComponent!.LoadDefault();
        dialogComponent!.ClearProductContainer();
        dialogComponent.ChangeTitle("Add");
        Product = new();
    }

    //Add product
    private void HandleAddProductEvent(Product incomingProduct)
    {
        //Update Product
        if (incomingProduct.Id > 0)
        {
            var product = Products.FirstOrDefault(_ => _.Id == incomingProduct.Id);
            if (product is null) return;
            product.Name = incomingProduct.Name; product.Amount = incomingProduct.Amount;
            Message = "Product Updated";
            dialogComponent!.ClearProductContainer();
            Product = new();
            return;
        }

        //Add product
        var chk = Products.FirstOrDefault(_ => _.Name!.ToLower().Equals(incomingProduct.Name!.ToLower()));
        if (chk is null)
        {
            incomingProduct.Id = Products.Count + 1;
            Products.Add(incomingProduct);
            dialogComponent!.ClearProductContainer();
            Product = new();
            Message = "Product Added";
            return;
        }
        Message = "Sorry product already added";
    }





    private static List<Product> Products = new();
    private async void EditProductClicked(Product incomingProduct)
    {
        // Change the form title to Update Product.
        dialogComponent!.ChangeTitle("Update");
        Product = incomingProduct;
        dialogComponent.LoadDefault();
        await js.InvokeVoidAsync("myDialogFunction");
    }


    // Delete Product
    private async void DeleteProductClicked(Product incomingProduct)
    {
        Product = incomingProduct;
        dialogComponent!.ShowConfirmDialog();
        await js.InvokeVoidAsync("myDialogFunction");
    }

    private void HandleConfirmDeleteEvent()
    {
        if (Product is null) return;
        Products.Remove(Product);
        dialogComponent!.ClearProductContainer();
        dialogComponent!.ShowConfirmDialog();
        Product = new();
    }

    //Pagination
    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };
    IQueryable<Person> PersonsQueryable = Enumerable.Empty<Person>().AsQueryable();

    [SupplyParameterFromForm]
    Person person { get; set; } = new();
    DateOnly SelectedDate;
    static List<Person> PersonsList = new();


    protected override void OnInitialized()
    {
        ConvertListToQueryable();

    }
    async Task AddPerson()
    {
        person.BirthDate = SelectedDate;
        // Update
        if (person.PersonId > 0)
        {
            var p = PersonsList.FirstOrDefault(_ => _.PersonId == person.PersonId);
            if (p is null) return;
            PersonsList.Remove(p); PersonsList.Add(person); person = new();
            GetDataAgain();
            return;
        }

        //Add

        if (person.Name is null) return;
        person.PersonId = PersonsList.Count + 1;
        PersonsList.Add(person);
        person = new();
        GetDataAgain();
        return;
    }

    // Load data from List to the Queryable container
    private void ConvertListToQueryable()
    {
        if (PersonsList is null) return;
        foreach (var person in PersonsList.OrderBy(_ => _.PersonId))
        {
            PersonsQueryable = PersonsQueryable.Concat(new[] { person }.AsQueryable());
        }
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    //clear container and reload
    void GetDataAgain()
    {
        PersonsQueryable = Enumerable.Empty<Person>().AsQueryable();
        ConvertListToQueryable();
    }

    void Edit(Person incomingModel)
    {
        SelectedDate = incomingModel.BirthDate;
        person = incomingModel;
    }

    void Delete(Person incomingModel)
    {
        PersonsList.Remove(PersonsList.FirstOrDefault(_ => _.PersonId == incomingModel.PersonId));
        if (PersonsList is null) return;
        GetDataAgain();
    }


    // Get Person's Age
    int ComputeAge(DateOnly birthDate)
    {
        return DateTime.Now.Year - birthDate.Year - (birthDate.DayOfYear < DateTime.Now.DayOfYear ? 0 : 1);
    }

    //Search Person
    void SearchPerson(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            var result = PersonsList.Where(c => c.Name!.Contains(e.Value!.ToString()!, StringComparison.CurrentCultureIgnoreCase)).ToList();
            PersonsQueryable = Enumerable.Empty<Person>().AsQueryable();
            if (result.Count == 0)
            {
                return;
            }

            if (result.Any())
            {
                foreach (var person in result.OrderBy(_ => _.PersonId))
                    PersonsQueryable = PersonsQueryable.Concat(new[] { person }.AsQueryable());
            }
            return;
        }
        GetDataAgain();
    }

    public class Person
    {
        public int PersonId { get; set; }
        public string? Name { get; set; }
        public DateOnly BirthDate { get; set; }
    };

}